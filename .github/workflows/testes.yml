name: Execucao de Testes

on:
    workflow_call:

jobs:
    unit-test:
        name: Teste de Unidade
        runs-on: ubuntu-latest
        steps:
          - name: Obtendo o codigo do projeto
            uses: actions/checkout@v4
          - name: Setup dotnet
            uses: actions/setup-dotnet@v4
            with:
              dotnet-version: "8.0.300"
          - name: Execucao do Teste de Unidade
            working-directory: ./src
            run: dotnet test ./Review-Filmes.Test.Unit/Review-Filmes.Test.Unit.csproj

    integration-test:
        name: Teste de Integracao
        runs-on: ubuntu-latest
        services:
          postgre:
            image: postgres:latest
            ports:
              - 5432:5432
            env:
                POSTGRES_USER: review
                POSTGRES_PASSWORD: postgrespwd
                POSTGRES_DB: review-filmes
        steps:
            - name: Obtendo o codigo do projeto
              uses: actions/checkout@v4

            - name: Setup dotnet
              uses: actions/setup-dotnet@v4
              with:
                dotnet-version: "8.0.300"

            - name: Execucao do Teste de Integracao
              working-directory: ./src
              run: dotnet test ./Review-Filmes.Test.Integration/Review-Filmes.Test.Integration.csproj
              env:
                ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=review-filmes;Username=review;Password=postgrespwd"
    
    sonar:
        name: Scan com o SonarQube
        runs-on: ubuntu-latest
        steps:
          - name: Obtendo o codigo do projeto
            uses: actions/checkout@v4
          - name: Setup JDK
            uses: actions/setup-java@v4
            with:
              distribution: adopt
              java-version: '21'
          
          - name: Setup dotnet
            uses: actions/setup-dotnet@v4
            with:
              dotnet-version: "8.0.300"

          - name: Instalacao do SonarQube Scanner
            run: dotnet tool install --global dotnet-sonarscanner

          - name: Build e analise
            working-directory: ./src
            run: |
              dotnet sonarscanner begin /k:"filme" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"  /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
              dotnet build Review-Filmes.sln
              dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

          - name: Verificacao do Quality Gate
            uses: sonarsource/sonarqube-quality-gate-action@master
            id: sonarqube-quality-gate-check
            env:
              SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
            with:
              scanMetadataReportFile: ./src/.sonarqube/out/.sonar/report-task.txt
          - name: "Exibir status quality gate"
            if: ${{ always() }}
            run: echo "O status do quality gate Ã© ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"




